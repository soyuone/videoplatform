#Servlet的生命周期？ init(),destroy()方法具体什么时候调用？
   1.创建Servlet实例 (创建Servlet实例有两个时机：客户端第一次请求某个Servlet时或web应用启动时；实例的创建及销毁都不是由程序员决定，而是由web容器进行控制)
   2.web容器调用Servlet的init方法，对Servlet初始化 
   3.容器调用service/doPost/doGet方法处理响应用户请求 
   4.web容器决定销毁Servlet时，先调用Servlet的destroy方法，通常在关闭web应用时销毁Servlet.
  
   Filter,Servlet调用流程：
	    web应用启动时，调用Filter init方法对Filter初始化
	           用户第一次发送请求后创建Servlet实例，调用Servlet init方法对其进行初始化
	           调用Filter doFilter方法在HttpServletRequest到达Servlet进行预处理
	           调用Servlet service方法对用户请求进行处理
	           调用Filter doFilter方法在HttpServletResponse到达客户端之前进行后处理
	    web应用关闭时，调用Servlet destroy方法销毁Servlet实例
	    web应用关闭时，调用Filter destroy方法销毁Filter


 web服务器负责接收客户端请求，每当接收到客户端连接请求后 web服务器应该使用单独的线程为该客户端提供服务：接收请求数据，送回响应数据。最新版的Tomcat已经不需要对
   每个用户请求都启用单独的线程、使用普通I/O读取用户请求的数据，最新版的Tomcat使用的是异步IO，具有更高的性能?


 POST请求传送的参数以及对应的值放在HTML HEADER中传输，@Responsebody URIEncoding？


 session机制用于保存客户端的状态信息，这些信息将会保存到web服务器的硬盘上；session里的属性值必须是可序列化的，否则将会引发不可序列化的异常?

 
 OpenSessionInViewFilter工作原理?


#性能优化之Hibernate Session、SessionFactory级别的缓存? 查询缓存？
   Hibernate包含两个级别的缓存：默认总是启动的Session级别的一级缓存，可选的SessionFactory级别的二级缓存;Session级别的一级缓存是局部缓存，只对当前
   Session有效，SessionFactory级别的二级缓存是全局缓存，对所有的Session都有效.
   
        开启Hibernate二级缓存需要：1.设置启用二级缓存 2.设置二级缓存的实现类
    
        当应用保存持久化实体、修改持久化实体时，Session并不会把这种改变flush到数据库，而是缓存在当前Session的一级缓存中，除非程序显式调用Session的flush方法或
        程序关闭Session时才会把这些改变一次性的fulsh到底层数据库——通过这种缓存可以减少与数据库的交互，从而提高数据库访问性能.
           
   SessionFactory级别的二级缓存是全局性的，所有Session都共享此二级缓存，默认是关闭的，必须由程序显式开启。一旦在应用中开启了二级缓存，当Session需要抓取
        数据时，Session将会先查找一级缓存，再查找二级缓存，只有当一级和二级缓存中都没有需要抓取的数据时，才会去查找底层数据库.
        一旦开启了二级缓存，而且设置了对某个持久化实体类启用缓存，SessionFactory就会缓存应用访问过的该实体类的每个对象，除非缓存的数据超过缓存空间.
        
       一级、二级缓存都是对整个实体进行缓存，不会缓存普通属性，如果相对普通属性进行缓存，可以使用查询缓存.只有经常使用相同的查询语句，并且使用相同的查询参数才能通过查询缓存获得好处,
       查询缓存的生命周期直到属性被修改了为止.然而通常情况下使用查询缓存并不能提高性能，反而会降低性能，因此慎用.
      

#Hibernate延迟加载、Session关闭、openSession、getCurrentSession、线程、事务、Filter、ThreadLocal?


#Hibernate get()、load()——LockOptions,save()、persist(),update、saveOrUpdate()、merge()？
   load和get的主要区别在于是否延迟加载，使用load方法将具有延迟加载功能，load方法不会立即访问数据库，当试图加载的记录不存在时，load方法可能返回一个未初始化的代理对象(
        持久化对象的替身),而get方法总是立即访问数据库当试图加载的记录不存在时，get方法将直接返回null。使用get或load加载持久化对象时还可以指定LockOptions锁模式参数，
   LockOptions提供READ和UPGRADE两个静态属性来代表共享、修改锁，如果需要加载某个持久化对象以供修改（相当于使用select···for update来装载对象），则可以使用
   LockOptions.UPGRADE.
           
   save()、persist()除了返回值有区别外，save方法会立即返回持久化对象的标识属性值，所以程序执行save方法会立即将持久化对象对应的数据插入数据库，而persist则保证当它在
        一个事务外部被调用时，并不立即转换成insert语句.
        
        当需要使用update来保存程序对持久化对象所做的修改时，如果不清楚该对象是否曾经持久化过，那么程序可以选择使用saveOrUpdate方法，该方法会自动判断该对象是否曾经持久化过，
        如果曾经持久化过，就执行update操作，否则将执行save操作。merge方法也可将程序对脱管对象所做的修改保存到数据库，但merge与update最大的区别在于merge方法不会持久化给定的
        对象，即当程序执行session.update(a)后a对象将变为持久化状态，而执行session.merge(a)后a对象依然不是持久化状态，a对象依然不会被关联到session上，merge方法会
        返回a对象的副本——该副本处于持久化状态.

 
 #MySQL数据类型，char、varchar、binary、varbinary、blob、longblob、text、longtext等类型的存储区别?
   text类型细分为四种类型：tinytext、text、mediumtext、longtext，分别对应不同的长度，text是非二进制字符串，并且需要指定字符集，并且按照该字符集进行校验和排序。
         它只能存储纯文本不能存储图片，可以看作是varchar在长度不足时的扩展.
         
   blog类型也细分为四种类型：tinyblob、blog、mediumblog、longblog，分别对应不同的长度，blog存储的是二进制数据，因此无须字符集校验，blob除了存储文本信息外，
         由于二进制存储格式，所以还可以保存图片等信息，blob可以看作是varbinary在长度不足时的扩展.
         
   varchar、text、blob是变长类型，对于存储需求取决于列值的实际长度，而不是取决于类型的最大可能尺寸.
   
   char使用定长的空间进行存储，char(4)存储4个字符，根据编码方式的不同占用不同的字节，gbk编码方式无论中英文，每个字符占用2字节的空间，utf8编码方式每个字符占用3个字节的空间，
         对于经常改变的值，char优于varchar，原因是固定长度的行不容易产生碎片。对于很短的列，char优于varchar，原因是varchar需要额外一个或两个字节存储字符串的长度.varchar
         保存可变长度的字符串，需要使用额外的一个或两个字节存储字符串长度。binary保存二进制字符串，它保存的是字节而不是字符，没有字符集限制，binary(8)可以保存8个字符，每个字符占1个
         字节，共占8个字节。varbinary保存变长的字符串。
   
   
#Base64编码、blob类型存放图片的优势？


#数据库中date、datetime、time、timestamp等时间类型的区别?
    date类型仅含日期，datetime包含日期和时间，time类型仅包含时间，timestamp包含日期和时间。
           上述类型在java中的映射类型分别为：java.sql.Date,java.sql.Timestamp,java.sql.Time,java.sql.Timestamp
    
    datetime类型支持的范围广，timestamp类型仅支持从1970-01-01 00:00:01到2038-01-19 03:14:07的UTC时间，MySQL在存储timestamp类型时会将时间转换为
    UTC时间，然后读取的时候再恢复成当前时区，如果你存储了一个timestamp类型的值后修改了MySQL的时区，当你再读取这个值时就会得到一个错误的时间，它提供了自动更新的功能(UPDATE CURRENT_TIMESTAMP)。


#Hibernate、MyBatis两个ORM框架的区别？